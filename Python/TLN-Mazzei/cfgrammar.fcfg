% start S
############################
# Grammar Rules
#############################

S[SEM = <?subj(?vp)>] -> NP[NUM=?n,SEM=?subj] VP[NUM=?n,SEM=?vp]

NP[NUM=?n,SEM=<?det(?nom)> ] -> Det[NUM=?n,SEM=?det]  N[NUM=?n,SEM=?nom]
NP[LOC=?l,NUM=?n,SEM=?np] -> PropN[LOC=?l,NUM=?n,SEM=?np]

# Nom[NUM=?n,SEM=?nom] -> N[NUM=?n,SEM=?nom]

# VP[NUM=?n,SEM=?v] -> V[AUX=2,NUM=?n,SEM=?v]
VP[TNS=?t,NUM=?n,SEM=<?v(?obj)>] -> V[AUX=0,TNS=?t,NUM=?n,SEM=?v] NP[SEM=?obj]
# VP[NUM=?n,SEM=<?v(?obj,?pp)>] -> DTV[NUM=?n,SEM=?v] NP[SEM=?obj] PP[+TO,SEM=?pp]

#PP[+TO, SEM=?np] -> P[+TO] NP[SEM=?np]

############################### added

####### 1° Sentence
VP[NUM=?n,SEM=<?v(?t)>] -> V[AUX=1,NUM=?n,SEM=?t] VP[TNS=ing,SEM=?v]
NP[SEM=?n] -> N[SEM=?n]


####### 2° Sentence
PP[SEM=<?v(?t)>] -> P[SEM=?t] NP[SEM=?v]
# N[SEM=<?v(?t)>] -> N[SEM=?t] PP[SEM=?v]
V[AUX=2,NUM=?x,SEM=?n] -> V[AUX=2,NUM=?x] NP[SEM=?n]
VP[SEM=<?t(?v)>] -> VP[SEM=?t] PP[SEM=?v]
S[SEM=?n] -> NPX VP[SEM=?n]


####### 3° Sentence

# N[SEM=<?t(?v)>] -> AP[SEM=?t] N[SEM=?v]
VP[SEM=<?t(?v)>] -> V[SEM=?t] PP[SEM=?v]
VP[SEM=<?v(?t)>] -> V[SEM=?t] V[SEM=?v]
# PP[SEM=<?t(?v)>] -> P[SEM=?t] NP[SEM=?v]
PP[SEM=<?v(?t(?x))>] -> PX[SEM=?x] PX[SEM=?t] N[SEM=?v]
Det[SEM=<?t(?v)>] -> Det[SEM=?t] AP[SEM=?v]




#############################
# Lexical Rules
#############################

PropN[-LOC,NUM=sg,SEM=<\P.P(angus)>] -> 'Angus'
PropN[-LOC,NUM=sg,SEM=<\P.P(cyril)>] -> 'Cyril'
PropN[-LOC,NUM=sg,SEM=<\P.P(irene)>] -> 'Irene'

Det[NUM=sg,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'every'
Det[NUM=pl,SEM=<\P Q.all x.(P(x) -> Q(x))>] -> 'all'
Det[SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'some'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'a'
Det[NUM=sg,SEM=<\P Q.exists x.(P(x) & Q(x))>] -> 'an'

N[NUM=sg,SEM=<\x.man(x)>] -> 'man'
N[NUM=sg,SEM=<\x.girl(x)>] -> 'girl'
N[NUM=sg,SEM=<\x.boy(x)>] -> 'boy'
N[NUM=sg,SEM=<\x.bone(x)>] -> 'bone'
N[NUM=sg,SEM=<\x.ankle(x)>] -> 'ankle'
N[NUM=sg,SEM=<\x.dog(x)>] -> 'dog'
N[NUM=pl,SEM=<\x.dog(x)>] -> 'dogs'

V[NUM=sg,SEM=<\x.bark(x)>,TNS=pres] -> 'barks'
V[NUM=pl,SEM=<\x.bark(x)>,TNS=pres] -> 'bark'
V[NUM=sg,SEM=<\x.walk(x)>,TNS=pres] -> 'walks'
V[NUM=pl,SEM=<\x.walk(x)>,TNS=pres] -> 'walk'
V[NUM=sg,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chases'
V[NUM=pl,SEM=<\X x.X(\y.chase(x,y))>,TNS=pres] -> 'chase'
V[NUM=sg,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'sees'
V[NUM=pl,SEM=<\X x.X(\y.see(x,y))>,TNS=pres] -> 'see'
V[NUM=sg,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bites'
V[NUM=pl,SEM=<\X x.X(\y.bite(x,y))>,TNS=pres] -> 'bite'
DTV[NUM=sg,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'gives'
DTV[NUM=pl,SEM=<\Y X x.X(\z.Y(\y.give(x,y,z)))>,TNS=pres] -> 'give'

P[+to] -> 'to'

################################## added

####### 1° Sentence --- exists e.(tense(e,PresCont) & image(e,you,things))
NP[SEM=<\P.P(you)>] -> 'you' | 'You'
V[AUX=1, NUM=sg,SEM=<\P.exists e.(P(e) & tense(e, PresCont))>] -> 'are'
V[AUX=0, TNS=ing, SEM=<\Y X x.X(\z.Y(\y.image(z,x,y)))>] -> 'imagining'
N[NUM=pl,SEM=<\P.P(things)>] -> 'things'

### 1° extra
V[SEM=<\X x.X(\y.image(x,y))>] -> 'image' | 'images'


####### 2° Sentence --- exists x.(price(x) & exists e.(head(e) & pronPoss(my,e) & over(x,e)))
NPX[NUM=sg] -> 'There' | 'there'
V[AUX=2,NUM=sg] -> 'is'
DET[SEM=<\P Q.exists e.(P(e) & Q(e))>] -> 'a'
N[SEM=<\x.price(x)>] -> 'price'
P[SEM=<\y z.over(z,y)>] -> 'on'
#Det[SEM=<\P Q.exists e.(adjPoss(my, e) & P(e) & Q(e))>] -> 'my'
Det[SEM=<\P Q z.exists e.(P(e) & adjPoss(my, e) & Q(e,z))>] -> 'my'
N[SEM=<\x.head(x)>] -> 'head'


####### 3° Sentence --- exists x.(opportunity(x) & adj(big,x) & pronPoss(your,x) & exists e.(tense(e,PresCont) & fly(e,x) & compl(e,out,of,here)))

Det[SEM=<\P Q X.exists e.(Q(e) & adjPoss(your, e) & P(e) & X(e))>] -> 'Your' | 'your'
AP[SEM=<\x.adj(big,x)>] -> 'big'
N[SEM=<\x.opportunity(x)>] -> 'opportunity'


#V[AUX=1, NUM=sg,SEM=<\P Q.exists e.(tense(e, PresCont) & P(e) & Q(e))>] -> 'is'
V[AUX=1, NUM=sg,SEM=<\Q.exists c.(Q(c) & tense(c,PresCont))>] -> 'is'
V[AUX=0, TNS=ing, SEM=<\X Q x.X(\y.(fly(y,x) & Q(y)))>] -> 'flying'

#V[AUX=0, TNS=ing, SEM=<\P y.exists c.(tense(c,PresCont) & fly(c,y) & P(c))>] -> 'flying'


PX[SEM=<\p a c.(compl(c,out,p,a))>] -> 'out'
PX[SEM=<\P.P(of)>] -> 'of'
N[SEM=<\P.P(here)>] -> 'here'

